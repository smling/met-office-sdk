name: CD

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"   # e.g. v1.2.3 -> release
  workflow_dispatch:

# prevent overlapping publishes on the same ref
concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: false

# minimal global permissions; publish needs these
permissions:
  contents: write
  packages: write
  id-token: write   # for build provenance attestation
  security-events: write
  attestations: write   # <-- required for create attestation

jobs:
  # 1) Tests (run once; CI covers matrix)
  tests:
    name: Tests (JDK 21)
    uses: ./.github/workflows/_tests.yml
    with:
      java_version: "21"
    secrets: inherit

  # 2) Static checks
  static-checks:
    name: Static checks (JDK 21)
    uses: ./.github/workflows/_static-checks.yml
    with:
      java_version: "21"
    secrets: inherit

  # 3) Publish only if tests & static checks pass
  publish:
    name: Publish
    needs: [tests, static-checks]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # for GitHub Packages & releases
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}     # optional (used in static checks workflow)
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # helpful for versioning from tags / changelog

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven
          # configure GitHub Packages as a Maven server (id must match settings/pom if used)
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Show effective version
        run: mvn -q help:evaluate -Dexpression=project.version -DforceStdout

      # Build once for publishing (tests already ran earlier)
      - name: Build (skip tests)
        run: mvn -B -q -DskipTests package

      # Generate SBOM (CycloneDX)
      - name: Generate CycloneDX SBOM
        run: |
          mvn -B -q org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom -DskipTests
          # typical outputs: target/bom.json (+ bom.xml in multi-module)

      # Build provenance attestation for built artifacts
      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            **/target/*.jar
            **/target/*.war
            **/target/*.zip

      # Deploy snapshot artifacts on main branch (GitHub Packages)
      - name: Deploy snapshot to GitHub Packages
        if: github.ref == 'refs/heads/main' && endsWith(steps.ver.outputs.project_version, '-SNAPSHOT')
        run: |
          mvn -B -q -DskipTests \
            -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${OWNER}/${REPO} \
            deploy

      # ---------- Auto-tag and release deploy on main ----------
      - name: Create and push tag from version
        if: github.ref == 'refs/heads/main' && !endsWith(steps.ver.outputs.project_version, '-SNAPSHOT')
        run: |
          set -e
          TAG="v${{ steps.ver.outputs.project_version }}"
          echo "Creating tag $TAG"
          # If tag already exists, skip
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      # ---------- Create GitHub Release on tag push (and also after auto-tag above) ----------
      - name: Create GitHub Release (attach artifacts)
        if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && !endsWith(steps.ver.outputs.project_version, '-SNAPSHOT'))
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.ver.outputs.project_version) }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            **/target/*.jar
            **/target/*.war
            **/target/*.zip
            **/target/bom.json
            **/target/bom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Keep SBOMs for main as artifacts (optional)
      - name: Upload SBOM artifact (main)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          if-no-files-found: ignore
          path: |
            **/target/bom.json
            **/target/bom.xml

      # ---------- Diagnostics ----------
      - name: Show Maven deploy target
        if: always()
        run: |
          echo "Deployed as version: ${{ steps.ver.outputs.project_version }}"
          echo "Current ref: $GITHUB_REF"
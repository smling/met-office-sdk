name: Reusable Static Checks

on:
  workflow_call:
    inputs:
      java_version:
        type: string
        required: false
        default: "21"
      fail_on_checkstyle:
        type: boolean
        required: false
        default: false
    secrets:
      METOFFICE_API_KEY:
        required: false

jobs:
  static-checks:
    name: Checkstyle (JDK ${{ inputs.java_version }})
    runs-on: ubuntu-latest
    env:
      METOFFICE_API_KEY: ${{ secrets.METOFFICE_API_KEY || 'DUMMY' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Run Checkstyle
        run: |
          if [ "${{ inputs.fail_on_checkstyle }}" = "true" ]; then
            mvn -B -q \
              -Dcheckstyle.consoleOutput=true \
              -Dcheckstyle.failOnViolation=true \
              checkstyle:checkstyle checkstyle:check
          else
            mvn -B -q \
              -Dcheckstyle.consoleOutput=true \
              checkstyle:checkstyle
          fi

      - name: Upload Checkstyle reports
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          if-no-files-found: ignore
          path: |
            **/target/checkstyle-result.xml
            **/target/site/checkstyle.html

      - name: Fail if Checkstyle failed
        run: |
          CS=${CHECKSTYLE_EXIT:-0}
          if [ "$CS" -ne 0 ]; then
            echo "Checkstyle exit: $CS"
            exit 1
          fi
      # --- Install Gitleaks (v8.28.0) from the tar.gz you provided ---
      - name: Install Gitleaks
        shell: bash
        run: |
          set -euo pipefail
          GL_VERSION="8.28.0"
          OS="linux"
          # Map runner arch to gitleaks asset name
          case "$(uname -m)" in
            x86_64) ARCH="x64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            *) echo "Unsupported architecture: $(uname -m)"; exit 1 ;;
          esac
          
          URL="https://github.com/gitleaks/gitleaks/releases/download/v${GL_VERSION}/gitleaks_${GL_VERSION}_${OS}_${ARCH}.tar.gz"
          echo "Downloading $URL"
          curl -fsSL "$URL" -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo install -m 0755 gitleaks /usr/local/bin/gitleaks
          gitleaks version

      # --- Secret scan (produce SARIF, don't fail yet; gate later) ---
      - name: Secret scan (Gitleaks)
        id: gitleaks
        shell: bash
        run: |
          set +e
          gitleaks detect \
            --source . \
            --redact \
            --report-format sarif \
            --report-path gitleaks.sarif
          GL_EXIT=$?
          echo "SECRETS_EXIT=$GL_EXIT" >> "$GITHUB_ENV"
          exit 0

      - name: Upload Gitleaks SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Upload Gitleaks report artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          if-no-files-found: ignore
          path: gitleaks.sarif

name: Reusable Static Checks

on:
  workflow_call:
    inputs:
      java_version:
        type: string
        required: false
        default: "21"
      fail_on_checkstyle:
        type: boolean
        required: false
        default: false
    secrets:
      METOFFICE_API_KEY:
        required: false

jobs:
  static-checks:
    name: Checkstyle (JDK ${{ inputs.java_version }})
    runs-on: ubuntu-latest
    env:
      METOFFICE_API_KEY: ${{ secrets.METOFFICE_API_KEY || 'DUMMY' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Run Checkstyle
        run: |
          if [ "${{ inputs.fail_on_checkstyle }}" = "true" ]; then
            mvn -B -q \
              -Dcheckstyle.consoleOutput=true \
              -Dcheckstyle.failOnViolation=true \
              checkstyle:checkstyle checkstyle:check
          else
            mvn -B -q \
              -Dcheckstyle.consoleOutput=true \
              checkstyle:checkstyle
          fi

      - name: Upload Checkstyle reports
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          if-no-files-found: ignore
          path: |
            **/target/checkstyle-result.xml
            **/target/site/checkstyle.html

      - name: Fail if Checkstyle failed
        run: |
          CS=${CHECKSTYLE_EXIT:-0}
          if [ "$CS" -ne 0 ]; then
            echo "Checkstyle exit: $CS"
            exit 1
          fi
      # --- Secret screening with Gitleaks ---
      # Finds hardcoded secrets in history/workspace; produces SARIF + artifact
      - name: Secret scan (Gitleaks)
        id: gitleaks
        run: |
          set +e
          # Install gitleaks (static binary)
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o /usr/local/bin/gitleaks
          chmod +x /usr/local/bin/gitleaks
          # Scan repository; redact to avoid leaking secrets into logs
          gitleaks detect \
            --source . \
            --redact \
            --report-format sarif \
            --report-path gitleaks.sarif
          GL_EXIT=$?
          echo "SECRETS_EXIT=$GL_EXIT" >> $GITHUB_ENV
          # Never fail here; we gate at the end so reports are uploaded
          exit 0

      - name: Upload Gitleaks SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
        if: always()  # upload even if findings exist

      - name: Upload Gitleaks report artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          if-no-files-found: ignore
          path: gitleaks.sarif
